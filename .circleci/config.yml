version: 2.1

# Here we define all the paths and versions of images we want to play with
aliases:
  # Define paths and never think about them again
  - &GAIA /tmp/gaia
  - &WORKSPACE /tmp/voyager
  - &DIST /tmp/voyager/dist
  - &DIST_TESTNET /tmp/voyager/dist_testnet
  # Pick docker versions here only, then use the aliases in the executors definition
  - &docker-node tendermintdev/voyager_node
  - &docker-browsers tendermintdev/voyager_node_browser
  - &docker-go circleci/golang:1.11
  - &docker-deploy tendermintdev/website_deployment

# reusable commands
commands:
  yarn-install:
    description: "[YARN] update and install"
    steps:
      - restore_cache:
          keys:
            - v4-dependencies-root-{{ checksum "package.json" }}
            - v4-dependencies-root-

      - run: yarn install
      - save_cache:
          paths:
            - yarn.lock
            - node_modules
          key: v4-dependencies-root-{{ checksum "package.json" }}

  sync:
    parameters:
      dist_path:
        type: string
      dist_path_testnet:
        type: string
    steps:
      - run:
          name: Set default environment variables
          command: |
            cd && touch $BASH_ENV

            if [ "${CIRCLE_BRANCH}" = "master" ]; then
              echo 'export DISTRIBUTION_ID=E3NNXI2PHNC362' >> $BASH_ENV
              echo 'export DIST_ID_TESTNET=E27N83VZ9QZFET' >> $BASH_ENV

              echo 'export BUCKET_NAME=lunie.io' >> $BASH_ENV
              echo 'export BUCKET_NAME_TESTNET=test.lunie.io ' >> $BASH_ENV
            else
              echo 'export DISTRIBUTION_ID=E1KBKFOGFYCD32' >> $BASH_ENV
              echo 'export BUCKET_NAME=staging.lunie.io' >> $BASH_ENV
            fi
      - run:
          name: Sync dist folder to s3 bucket
          command: |
            source $BASH_ENV
            cd << parameters.dist_path >>

            echo "deployment job ID = $CIRCLE_BUILD_NUM<br>" >> version.html
            echo "deployment job URL = $CIRCLE_BUILD_URL<br>" >> version.html

            aws s3 sync . s3://$BUCKET_NAME --delete

            if [[ ! -z "${BUCKET_NAME_TESTNET}" ]]; then
              cd ..
              cd << parameters.dist_path_testnet >>
              aws s3 sync . s3://$BUCKET_NAME_TESTNET --delete
            fi
      - run:
          name: Invalidate the cloudfront distribution
          command: |
            source $BASH_ENV

            aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --path "/*"

            if [[ ! -z "${DIST_ID_TESTNET}" ]]; then
              aws cloudfront create-invalidation --distribution-id $DIST_ID_TESTNET --path "/*"
            fi

# a reusable executor
executors:
  web:
    docker:
      - image: *docker-browsers
    working_directory: *WORKSPACE

  node:
    docker:
      - image: *docker-node
    working_directory: *WORKSPACE

  go:
    docker:
      - image: *docker-go
    working_directory: *WORKSPACE

  web_deploy:
    docker:
      - image: *docker-deploy
    environment:
      BASH_ENV: /root/.bashrc
      AWS_REGION: us-east-1

jobs:
  build:
    environment:
      DIST_TESTNET: *DIST_TESTNET
    executor: web
    steps:
      - checkout
      - yarn-install
      - run: |
          mkdir -p dist

          yarn build:keybase-cache
          if [ "${CIRCLE_BRANCH}" = "master" ]; then
            yarn build:ui --output-path $DIST_TESTNET
            STARGATE=https://stargate.lunie.io RPC=https://rpc.lunie.io:26657 CIRCLECI=true yarn build:ui
          else
            STARGATE=https://stargate.lunie.io RPC=https://rpc.lunie.io:26657 CIRCLECI=true yarn build:ui
          fi

      - store_artifacts:
          path: *DIST
      - store_artifacts:
          path: *DIST_TESTNET
      - persist_to_workspace:
          root: *WORKSPACE
          paths:
            - dist
            - dist_testnet

  pendingUpdated:
    executor: node
    steps:
      - checkout
      - run: tasks/pending-changed-check.sh

  lint:
    executor: node
    steps:
      - checkout
      - yarn-install
      - run: yarn run lint

  testUnit:
    executor: web
    steps:
      - checkout
      - yarn-install
      - run:
          name: Setup Code Climate test-reporter
          command: |
            # download test reporter as a static binary
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Test
          command: |
            # notify Code Climate of a pending test report using `before-build`
            ./cc-test-reporter before-build
            yarn run test:unit
            # upload test report to Code Climate
            ./cc-test-reporter format-coverage -t lcov ./test/unit/coverage/lcov.info
            ./cc-test-reporter upload-coverage
          no_output_timeout: 120

  security:
    executor: web
    steps:
      - checkout
      - run:
          name: Audit
          command: |
            set +e

            SUMMARY="$(yarn audit | grep Severity)"
            VULNERABILITIES=".*(High|Critical).*"

            if [[ $SUMMARY =~ $VULNERABILITIES ]]; then
              echo "Unsafe dependencies found: $SUMMARY" >&2
              exit 1
            fi
            echo "Your dependencies are secure enough: $SUMMARY"
            exit 0

  testE2e:
    executor: web
    steps:
      - checkout
      - attach_workspace:
          at: *WORKSPACE
      - yarn-install
      - run:
          name: Build for E2E test
          command: 
            STARGATE=http://localhost:9070 RPC=http://localhost:26657 CIRCLECI=true yarn build:ui
      - run:
          name: Test
          command: yarn serve & yarn run test:e2e
          no_output_timeout: 120
      - store_artifacts:
          path: testArtifacts
          when: on_fail

  deploy2s3:
    executor: web_deploy
    steps:
      - attach_workspace:
          at: *WORKSPACE
      - sync:
          dist_path: *DIST
          dist_path_testnet: *DIST_TESTNET

  # Release code and sourcemaps to Sentry
  sentry:
    executor: web
    steps:
      - checkout
      - yarn-install
      - run: |
          mkdir -p dist
          CIRCLECI=true RELEASE=true yarn build:ui

  # Create release.
  release:
    executor: node
    steps:
      - checkout
      - yarn-install
      - run: node tasks/createReleasePR.js

  # Publish the release to GitHub.
  publish:
    executor: node
    steps:
      - checkout
      - yarn-install
      - run:
          command: |
            mostRecentTag=$(git describe --abbrev=0 --tags)

            if [ $mostRecentTag = release-candidate ]; then
              set -o verbose

              # Delete the tag before testing the build in case it fails.
              git remote add bot https://${GIT_BOT_TOKEN}@github.com/cosmos/voyager.git
              git tag -d release-candidate
              git push --delete bot release-candidate

              node tasks/publish.js
            fi
  # Push merges to master immediatly back to develop to stay in sync
  mergeBack:
    executor: node
    steps:
      - checkout
      - run:
          command: |
            git remote add bot https://${GIT_BOT_TOKEN}@github.com/luniehq/lunie.git
            git checkout develop
            git pull
            git merge origin/master
            git push


workflows:
  version: 2
  build-and-deploy:
    jobs:
      # Static checks before
      - pendingUpdated:
          filters:
            branches:
              ignore: 
                - release
                - master

      - security:
          filters:
            branches:
              ignore: release

      - lint:
          filters:
            branches:
              ignore: release

      - testUnit:
          filters:
            branches:
              ignore: release

      - build:
          # no heavy lifting if other portion fails
          requires:
            - security
            - lint

      - deploy2s3:
          requires:
            - testUnit
            - build
          filters:
            branches:
              only:
                - develop
                - master
      - sentry:
          requires:
            - testUnit
          filters:
            branches:
              only:
                - develop
                - master

      - testE2e:
          filters:
            branches:
              ignore:
                - release
                - master

      - publish:
          requires:
            - pendingUpdated
            - build
            - testUnit
            - testE2e
          filters:
            branches:
              only: develop

  # Every UTC midnight we go on develop and release
  release:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - release
  releaseManually:
    jobs:
      - release:
          filters:
            branches:
              only:
                - release
  mergeBack:
    jobs:
      - mergeBack:
          filters:
            branches:
              only: master
